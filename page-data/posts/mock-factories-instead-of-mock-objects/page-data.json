{"componentChunkName":"component---src-templates-post-post-template-post-template-tsx","path":"/posts/mock-factories-instead-of-mock-objects","result":{"data":{"markdownRemark":{"id":"d00372f3-3eb1-5db3-8436-51bf5f0943d3","html":"<p>These last months i’ve being practicing Clean architecture and TDD at some of my personal projects (<a href=\"https://github.com/leonardodimarchi/massage-therapy-api\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">like this one</a>), and with that i’ve learned some new concepts and patterns.</p>\n<p>Over the course of the projects, i was using mock objects at my unit tests.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should create the user'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token comment\">// Arrange</span>\r\n  <span class=\"token keyword\">const</span> mockedUser<span class=\"token operator\">:</span> UserEntity <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\r\n    name<span class=\"token operator\">:</span> <span class=\"token string\">\"mocked name\"</span><span class=\"token punctuation\">;</span>\r\n    email<span class=\"token operator\">:</span> <span class=\"token string\">\"mocked email\"</span><span class=\"token punctuation\">;</span>\r\n    phone<span class=\"token operator\">:</span> <span class=\"token string\">\"mocked phone\"</span><span class=\"token punctuation\">;</span>\r\n    roles<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Roles<span class=\"token punctuation\">.</span><span class=\"token constant\">ADMIN</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span>\r\n  \r\n  <span class=\"token comment\">// Act</span>\r\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">usecase</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>mockedUser<span class=\"token punctuation\">)</span>\r\n  \r\n  <span class=\"token comment\">// Assert</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>With the time, those projects was getting bigger, and depending on the layer that i was working on, i need to use the same mock over and over again. So i separated the mocks in different files to use those mocks when i needed to.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// test/mocks/user/user_entity.mock.ts</span>\r\n\r\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> userMock<span class=\"token operator\">:</span> UserEntity <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\r\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"mocked name\"</span><span class=\"token punctuation\">;</span>\r\n  email<span class=\"token operator\">:</span> <span class=\"token string\">\"mocked email\"</span><span class=\"token punctuation\">;</span>\r\n  phone<span class=\"token operator\">:</span> <span class=\"token string\">\"mocked phone\"</span><span class=\"token punctuation\">;</span>\r\n  roles<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Roles<span class=\"token punctuation\">.</span><span class=\"token constant\">ADMIN</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n</code></pre></div>\n<p>If needed, i override some properties just by destructuring the mock and adding different values:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// usecases/register/register.usecase.spec.ts</span>\r\n\r\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should do something with an ADMIN user'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token comment\">// Arrange</span>\r\n  \r\n  <span class=\"token comment\">// Act</span>\r\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">usecase</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>userMock<span class=\"token punctuation\">)</span>\r\n  \r\n  <span class=\"token comment\">// Assert</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should do something with a NORMAL user'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token comment\">// Arrange</span>\r\n  \r\n  <span class=\"token comment\">// Act</span>\r\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">usecase</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>userMock<span class=\"token punctuation\">,</span> roles<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Roles<span class=\"token punctuation\">.</span><span class=\"token constant\">NORMAL</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n  \r\n  <span class=\"token comment\">// Assert</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>That worked just fine for a time, until i decided to try <a href=\"https://stackoverflow.com/questions/23314330/rich-vs-anemic-domain-model\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Rich Entities</a> with inner props using <a href=\"https://martinfowler.com/bliki/ValueObject.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Value Objects</a>, so destructuring wouldn’t work this time.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// domain/entities/user.entity.ts</span>\r\n\r\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserEntityProps</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\r\n  name<span class=\"token operator\">:</span> Name<span class=\"token punctuation\">;</span>\r\n  email<span class=\"token operator\">:</span> Email<span class=\"token punctuation\">;</span>\r\n  phone<span class=\"token operator\">:</span> Phone<span class=\"token punctuation\">;</span>\r\n  roles<span class=\"token operator\">:</span> Roles<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserEntity</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> UserEntityProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span>\r\n\r\n  <span class=\"token keyword\">private</span> props<span class=\"token operator\">:</span> UserEntityProps<span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token comment\">// Getters and Setters</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Example of how i’ve tried to adapt for the first time, exporting the props object:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// test/mocks/user/user_entity_props.mock.ts</span>\r\n\r\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> userPropsMock<span class=\"token operator\">:</span> UserEntityProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\r\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"mocked name\"</span><span class=\"token punctuation\">;</span>\r\n  email<span class=\"token operator\">:</span> <span class=\"token string\">\"mocked email\"</span><span class=\"token punctuation\">;</span>\r\n  phone<span class=\"token operator\">:</span> <span class=\"token string\">\"mocked phone\"</span><span class=\"token punctuation\">;</span>\r\n  roles<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Roles<span class=\"token punctuation\">.</span><span class=\"token constant\">ADMIN</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// usecases/register/register.usecase.spec.ts</span>\r\n\r\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should do something with an ADMIN user'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token comment\">// Arrange</span>\r\n  \r\n  <span class=\"token comment\">// Act</span>\r\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">usecase</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>\r\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">UserEntity</span><span class=\"token punctuation\">(</span>userPropsMock<span class=\"token punctuation\">)</span>\r\n  <span class=\"token punctuation\">)</span>\r\n  \r\n  <span class=\"token comment\">// Assert</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should do something with a NORMAL user'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token comment\">// Arrange</span>\r\n  \r\n  <span class=\"token comment\">// Act</span>\r\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">usecase</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>\r\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">UserEntity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> \r\n      <span class=\"token operator\">...</span>userPropsMock<span class=\"token punctuation\">,</span> \r\n      roles<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Roles<span class=\"token punctuation\">.</span><span class=\"token constant\">NORMAL</span><span class=\"token punctuation\">]</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n  <span class=\"token punctuation\">)</span>\r\n  \r\n  <span class=\"token comment\">// Assert</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>I wasn’t liking it so much, so i tried to find a new solution. That’s when i watched an event at <a href=\"https://www.rocketseat.com.br/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Rocketseat</a> where they introduced the concept of mock factories.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// test/factories/user/user_entity.factory.ts</span>\r\n\r\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Override</span> <span class=\"token operator\">=</span> Partial<span class=\"token operator\">&lt;</span>UserEntityProps<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function\">makeUserMock</span><span class=\"token punctuation\">(</span>\r\n  override<span class=\"token operator\">:</span> Override <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> UserEntity <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UserEntity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\r\n    name<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Name</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mocked name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    email<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Email</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mocked email\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    phone<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Phone</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mocked phone\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    roles<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Roles<span class=\"token punctuation\">.</span><span class=\"token constant\">ADMIN</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token operator\">...</span>override<span class=\"token punctuation\">,</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// usecases/register/register.usecase.spec.ts</span>\r\n\r\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should do something with an ADMIN user'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token comment\">// Arrange</span>\r\n  \r\n  <span class=\"token comment\">// Act</span>\r\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">usecase</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token function\">makeUserMock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n  \r\n  <span class=\"token comment\">// Assert</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should do something with a NORMAL user'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token comment\">// Arrange</span>\r\n  \r\n  <span class=\"token comment\">// Act</span>\r\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">usecase</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>\r\n    <span class=\"token function\">makeUserMock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\r\n      roles<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Roles<span class=\"token punctuation\">.</span><span class=\"token constant\">NORMAL</span><span class=\"token punctuation\">]</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n  <span class=\"token punctuation\">)</span>\r\n  \r\n  <span class=\"token comment\">// Assert</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>With this, i got a scalable and reusable solution when new fields are added =)</p>","fields":{"slug":"/posts/2023-02-07---Mock-factories-instead-of-mock-objects//posts/mock-factories-instead-of-mock-objects","tagSlugs":["/post-tag/typescript/","/post-tag/unit-testing/"]},"frontmatter":{"date":"2023-02-07T23:46:37.121Z","description":"In this article, i'll share my experiences using Mock Factories instead of Mock Objects.","tags":["Typescript","Unit Testing"],"title":"Mock Factories instead of Mock objects","socialImage":null}}},"pageContext":{"slug":"/posts/2023-02-07---Mock-factories-instead-of-mock-objects//posts/mock-factories-instead-of-mock-objects"}},"staticQueryHashes":["1855364224","2358783463","2980535952"]}